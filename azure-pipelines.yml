trigger:
- master
- feature/*

stages:

- stage: 'Build'
  variables:
    buildConfiguration: 'Release'
    GitVersion.SemVer: ''

  jobs:
  - job:
    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: self  
      persistCredentials: true
    
    - task: GitVersion@5
      displayName: GitVersion
      inputs:
        runtime: 'core'
        configFilePath: 'gitversion.yml'
        updateAssemblyInfo: true
        updateAssemblyInfoFilename: 'AssemblyInfo.cs'
        preferBundledVersion: false

    - task: DotNetCoreCLI@2
      displayName: 'NuGet Restore'
      inputs:
        command: restore
        projects: '**/AllOverIt.*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '**/AllOverIt.*.csproj'
        arguments: '--configuration $(buildConfiguration)'
        versioningScheme: byEnvVar
        versionEnvVar: '$(GitVersion.SemVer)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: test
        projects: '**/AllOverIt.*[Tt]ests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="$(Build.SourcesDirectory)/TestResults/Coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'NuGet Pack - Release'
      inputs:
        command: pack
        packagesToPack: '**/AllOverIt.*.csproj;!**/AllOverIt.*[Tt]ests/*.csproj;!Demos/**'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true 
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'GitVersion.SemVer'

    - task: DotNetCoreCLI@2
      displayName: 'NuGet Pack - Pre Release'
      inputs:
        command: pack
        packagesToPack: '**/AllOverIt.*.csproj;!**/AllOverIt.*[Tt]ests/*.csproj;!Demos/**'
        #buildProperties: 'VersionSuffix="$(Build.BuildNumber)"'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true 
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'GitVersion.SemVer'

    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'

- stage: 'PublishPrereleaseNuGetPackage'
  displayName: 'Publish Prerelease NuGet Package'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
  - job:
    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'

    - task: DotNetCoreCLI@2
      displayName: 'NuGet Push Package'
      inputs:
        command: 'push'
        #packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg;-:$(Build.ArtifactStagingDirectory)/*.Tests.nupkg'
        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'AllOverIt/aoisandbox'


- stage: 'PublishReleaseNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'PublishPrereleaseNuGetPackage'
  condition: succeeded()
  jobs:
  - deployment:
    pool:
      vmImage: 'windows-latest'
    environment: 'nuget-org'
    strategy:
     runOnce:
       deploy:
         steps:
         #- task: DotNetCoreCLI@2   - doesn't support encrypted API keys
         - task: NuGetCommand@2
           displayName: 'NuGet Push Package'
           inputs:
             command: 'push'
             #packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg;-:$(Build.ArtifactStagingDirectory)/*.Tests.nupkg'
             packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
             nuGetFeedType: 'external'
             publishFeedCredentials: 'Nuget-MJF-Push'
